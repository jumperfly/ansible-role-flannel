- name: Pull flannel image
  docker_image: name={{ flannel_docker_registry }}/coreos/flannel tag=v{{ flannel_version }}-amd64

- name: Deploy flannel
  run_once: true
  include_tasks: k8s.yml

- name: Wait for flannel env file - 30 seconds
  wait_for: path=/var/run/flannel/subnet.env timeout=30
- name: Read cidr from flannel env file
  command: grep FLANNEL_SUBNET= /var/run/flannel/subnet.env
  register: flannel_subnet_result
  changed_when: false
- name: Read flannel subnet
  set_fact: flannel_subnet={{ flannel_subnet_result.stdout.split('=')[1] }}
- name: Read flannel IP
  set_fact: flannel_ip={{ flannel_subnet.split('/')[0] }}
- name: Configure docker for flannel subnet
  lineinfile: path=/etc/sysconfig/docker regexp=^DOCKER_BIP= line="DOCKER_BIP=--bip {{ flannel_subnet }}"
- name: Restart docker service
  service: name={{ item.service }} state={{ item.state }}
  when: ansible_docker0 is not defined or ansible_docker0.ipv4.address != flannel_ip
  register: restart_docker_result
  loop:
  - { service: kubelet, state: stopped }
  - { service: docker, state: stopped }
  - { service: docker, state: started }
  - { service: kubelet, state: started }

- name: Wait for apiserver to start - 30 seconds
  wait_for: port=8080 timeout=30
  register: wait_for_apiserver_result
  when: restart_docker_result.changed
  delegate_to: "{{ kubectl_host }}"
  run_once: true
- name: Pause for apiserver to start fully - 30 seconds
  pause: seconds=30
  when: wait_for_apiserver_result.elapsed|default(0) > 0
  run_once: true
